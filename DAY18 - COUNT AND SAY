 #DAY18 Count and SayðŸŒ‹
#100DaysOfCode #100daysofcodechallenge 
Algo,
*recursion
*Base Case, n==1 -> return "1"
*recursion call -> C&S(n-1)
*count frequency of the char -> append the count to ans -> append the char ((till u traverse every char of string)

https://leetcode.com/problems/count-and-say/submissions/ 

************************
The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string "3322251":

Given a positive integer n, return the nth term of the count-and-say sequence.

Example 1:
Input: n = 1
Output: "1"
Explanation: This is the base case.

Example 2:
Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"
 
Constraints:
1 <= n <= 30
*********************************
NAIVE SOLUTION
/*iterative
        string s="1";
        for(int i=2;i<=n;i++){
            int curr=1;
            char ch=s[0];
            string tmp="";
            for(int j=1;j<s.size();j++){
                if(s[j]==ch){
                    curr++;
                }
                else{
                    tmp+=(curr+'0');
                    tmp+=ch;
                    curr=1;
                    ch=s[j];
                }
            }
            tmp+=(curr+'0');
            tmp+=ch;
            s=tmp;
        }
        return s;
        */
******************************
class Solution {
public:
    string countAndSay(int n) {
        if(n==1){
            return "1";
        }
        if(n==2){
            return "11";
        }
        string s = countAndSay(n-1);
        string ans = "";
        int i = 1,count=1;
        while(i<s.length()){
            if(s[i]==s[i-1]){
                count++;
                i++;
                
            }
            else{
                ans = ans + to_string(count);
                ans = ans + s[i-1];
                count = 1;
                i++;
            }
        }
        ans = ans + to_string(count);
        ans = ans + s[i-1];
        return ans;
    }
};
******************************
Success
Runtime: 115 ms, faster than 10.29% of C++ online submissions for Count and Say.
Memory Usage: 161.3 MB, less than 6.79% of C++ online submissions for Count and Say.
