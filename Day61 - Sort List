Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105
 
Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?
Accepted - 508,409
Submissions - 965,713
*********************************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void swap(ListNode* one, ListNode* two){
        int temp =  two->val;
        two->val = one->val;
        one->val = temp;
    }
    ListNode* sortList(ListNode* head) {
        int i = 0;
        int count = 0;
        // cout<<head->val;
        ListNode* dummy = head;
        while(dummy!=NULL){
            dummy = dummy->next;
            count++;
        }
        // cout<<count;
        while(i <= count-2){//0 to 2
            int minNode = INT_MAX;
            ListNode* mini = NULL;
            ListNode* temp = head;
            int k = 0;
            // cout<<temp->val;
            while(k!=i){
                temp = temp->next;
                k++;
            }
            // cout<<temp->val<<endl;
            ListNode* Ntemp;
            Ntemp = temp ;
            for(int j=i;j<count;j++){//0 to 3
                cout<<Ntemp->val<<" "<<j<<" ";
                if(minNode>Ntemp->val){
                    minNode = Ntemp->val;
                    mini = Ntemp;
                    // Ntemp = Ntemp -> next;
                    
                }
                Ntemp = Ntemp -> next;
            }
            cout<<endl;
            // cout<<minNode<<"|"<<endl;
            swap(temp, mini);
            i++;
        }
        return head;
    }
};
****************************************************************
Optimized
TC = O(nlogn)
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        //If List Contain a Single or 0 Node
        if(head == NULL || head ->next == NULL)
            return head;
        
        
        ListNode *temp = NULL;
        ListNode *slow = head;
        ListNode *fast = head;
        
        // 2 pointer appraoach / turtle-hare Algorithm (Finding the middle element)
        while(fast !=  NULL && fast -> next != NULL)
        {
            temp = slow;
            slow = slow->next;          //slow increment by 1
            fast = fast ->next ->next;  //fast incremented by 2
            
        }   
        temp -> next = NULL;            //end of first left half
        
        ListNode* l1 = sortList(head);    //left half recursive call
        ListNode* l2 = sortList(slow);    //right half recursive call
        
        return mergelist(l1, l2);         //mergelist Function call
            
    }
    
    //MergeSort Function O(n*logn)
    ListNode* mergelist(ListNode *l1, ListNode *l2)
    {
        ListNode *ptr = new ListNode(0);
        ListNode *curr = ptr;
        
        while(l1 != NULL && l2 != NULL)
        {
            if(l1->val <= l2->val)
            {
                curr -> next = l1;
                l1 = l1 -> next;
            }
            else
            {
                curr -> next = l2;
                l2 = l2 -> next;
            }
        
        curr = curr ->next;
        
        }
        
        //for unqual length linked list
        
        if(l1 != NULL)
        {
            curr -> next = l1;
            l1 = l1->next;
        }
        
        if(l2 != NULL)
        {
            curr -> next = l2;
            l2 = l2 ->next;
        }
        
        return ptr->next;
    }
};
*********************************************************
Success
Runtime: 288 ms, faster than 46.28% of C++ online submissions for Sort List.
Memory Usage: 74.1 MB, less than 10.97% of C++ online submissions for Sort List.
