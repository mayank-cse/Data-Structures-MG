I am in LOVEðŸ¥°...with recursion 
#DAY21 - Generate Parentheses
#100daysofcodechallenge #100DaysOfCode 
Algo,
*Base Case -> if open and close = 0, push output to answer
*Call recursion with conditions 
**call close bracket only when close>open -> Balanced
https://leetcode.com/problems/generate-parentheses/submissions/ 
*******************************
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8
********************************
class Solution {
public:
    void solve(vector<string>& ans, string output, int open, int close){
        if(open==0 and close==0){
            ans.push_back(output);
            // return;
        }
        if(open>0){
            solve(ans, output+ "(", open-1, close);
        }
        if(close>open){
            solve(ans, output+ ")", open, close-1);
        }

        // return;
        
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        int close = n, open = n;
        string output = "";
        solve(ans, output, open, close);
        return ans;
    }
};
