There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3

Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 
Constraints:
1 <= m, n <= 100
***********************************
// BRUTE FORCE METHOD
// class Solution {
// public:
//     int helper(int i, int j, int m, int n){
//         if(i>=m || j>=n){
//             return 0;
//         }
//         if(i==m-1 and j==n-1){
//             return 1;
//         }
//         return helper(i+1,j,m,n)+helper(i,j+1,m,n);
//     }
//     int uniquePaths(int m, int n) {
        
//         return helper(0,0,m,n);
//     }
// };
// *********************************************************

//DP + Memorization
#include <vector>
class Solution {
public:
    int helper(int i, int j, int m, int n,vector<vector<int>> &dp){
        if(i>=m || j>=n){
            return 0;
        }
        if(i==m-1 and j==n-1){
            return 1;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        return dp[i][j] = helper(i+1,j,m,n,dp)+helper(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n,-1));
        return helper(0,0,m,n,dp);
    }
};
***********************************
METHOD 3 NOT YET UNDERSTOOD
***********************************
ðŸ˜±ðŸŽ‰
#Day29 - Unique Paths
#100DaysOfCode #100daysofcodechallenge
Algo,
*if(i==m-1 && j==n-1)-> 1;
*if(i>=m or j>=n)-> 0;
*if(dp[i][j]!=-1) -> dp[i][j];
*return dp[i][j]=helper(i+1,j)+helper(i,j+1);
vector<vector<int>> dp(m, vector<int>(n,-1));
**********************************
Success
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Unique Paths.
Memory Usage: 6.6 MB, less than 26.49% of C++ online submissions for Unique Paths.
