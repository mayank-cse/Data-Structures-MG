Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
************

Naive Solution 

int lengthOfLongestSubstring(string s) {
        vector<int> vec;
        
        int max = 0, count = 0;
        
        if(s.length()==0){
            return 0;
        }
        
        for(int i=0;i<s.length();i++){
            if(vec.empty()){
                vec.push_back(s[i]);
                continue;
            }
            int flag = 1;
            int rep = 0;
            for(auto j=vec.begin();j!=vec.end();++j){
                if(*j==s[i]){
                    flag=0;
                }
            }
            if(flag==0){
                count = vec.size();
                vec.clear();
                if(count>max){
                    max=count;
                }
                i = i - count;
                continue; 
            }
            else if(flag==1){
                vec.push_back(s[i]);
                continue;
            }
            
            // i++;
        }
        count = vec.size();
        if(count>max){
            max=count;
        }
        return max;
    }
    ************
    Success
Runtime: 641 ms, faster than 8.60% of C++ online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 7.3 MB, less than 85.77% of C++ online submissions for Longest Substring Without Repeating Characters
***************

Time Complexity - O(n*2)
Space Complexity - O(n)


