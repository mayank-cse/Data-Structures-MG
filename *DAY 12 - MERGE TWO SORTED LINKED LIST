* - means I'll come back to this problem


You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]

Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
*************************************************
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        
        ListNode* a=l1,*b=l2,*head,*tail;
        if(a->val <= b->val)
        {
            head = l1;
            tail = l1;
            a=a->next;
        }
        else
        {
            head = l2;
            tail = l2;
            b=b->next;
        }
            
        
        while(a && b)
        {
            if(a->val<=b->val)
            {
                tail->next = a;
                tail = a;
                a=a->next;
            }
            else
            {
                tail->next = b;
                tail = b;
                b=b->next;
            }
        }
        if(a)
            tail->next = a;
        if(b)
            tail->next = b;
        return head;
    }
};
*************************************
Success

Runtime: 8 ms, faster than 75.74% of C++ online submissions for Merge Two Sorted Lists.
Memory Usage: 14.8 MB, less than 45.13% of C++ online submissions for Merge Two Sorted Lists.
