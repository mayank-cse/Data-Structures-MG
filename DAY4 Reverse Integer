Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

***************
HINT_Take care of the INT_MAX and INT_MIN - edge case
***************
class Solution {
public:

int reverse(int x) {
	//as in ans we might require storing a no. greater than INT_MAX and less than INT_min we take it as "LONG" which has greater range
    long ans = 0;
    while(x!=0){
        int curr = x%10;
        ans = ans*10 + curr;
        x = x/10;
		//As while reversing the no. can exceed the INT_MAX and INT_min values
        if(ans>INT_MAX || ans<INT_MIN){
            return 0;
        }
		//second way
        // if((ans - curr)/10 !=prev) {return 0; break;}
        // prev = ans;
    }
    
    return ans;
}
};



******************
Time complexity - O(n)
space Complexity - O(n)

