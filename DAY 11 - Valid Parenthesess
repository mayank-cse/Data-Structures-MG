#Day11 - Valid Parentheses ðŸŒ‹
My college exams are going on but learning shud not stop, thus I solved an easy prob
Algo,
*take a stack
*u see open bracket_push
*close bracket check if stack.top matches with open bracket u want
#100DaysOfCode #100daysofcodechallenge 
**********************************
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:

*Open brackets must be closed by the same type of brackets.
*Open brackets must be closed in the correct order.
 
Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 
Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'
**********************************
class Solution {
public:
   ```
 bool isValid(string s) {
		 //create a stack
        stack<char> stck;
        int n = s.length();
        for(int i=0;i<n;i++){
            if(s[i]=='('||s[i]=='{'||s[i]=='['){
				//if the bracket is open push it to the stack
                stck.push(s[i]);
            }
            if(stck.empty()){
				//if the stack is empty and u still find the closed bracket return false
                if(s[i]==')'||s[i]=='}'||s[i]==']'){
                return false;
                }
            }
            //If you find a closed bracket check the top of the stack if it contains the corresponding opening bracket, 
			//if not return false
            if(s[i]==')'){
                if(stck.top()!='('){
                    return false;
                }
                stck.pop();
            }
            if(s[i]=='}'){
                if(stck.top()!='{'){
                    return false;
                }
                stck.pop();
            }
            if(s[i]==']'){
                if(stck.top()!='['){
                    return false;
                }
                stck.pop();
            }
            
        }
		//if after completing the string traversal the stack is not empty_return false
        if(!stck.empty()){
            return false;
        }
        return true;
    }
```
};
