#DAY10 - Letter Combination of phone number
Algo, #100DaysOfCode #100daysofcodechallenge 
*if no digit -> return {}
*int to str func
*recursive function(string digits, int i)
 *base case if(i==digits.size()-1) return the ans
 *else go to right most
 *using 2 loops cross multiply
*****************************************
class Solution {
public:

    string integertostring(char x){
        if(x=='2'){
            return "abc";
        }
        else if(x=='3'){
            return "def";
        }
        else if(x=='4'){
            return "ghi";
        }
        else if(x=='5'){
            return "jkl";
        }
        else if(x=='6'){
            return "mno";
        }
        else if(x=='7'){
            return "pqrs";
        }
        else if(x=='8'){
            return "tuv";
        }
        else if(x=='9'){
            return "wxyz";
        }
        return "";
        
    }
    vector<string> memo(string digits,int i){
            if(i==digits.size()-1){
                vector<string> ans;
                for(char ch:integertostring(digits[i])){
                    string str="";
                    str+=ch;
                    ans.push_back(str);
                }
                return ans;
            }
            vector<string> right=memo(digits,i+1);
            string str=integertostring(digits[i]);
            vector<string> ans;
            for(char ch:str){
                for(string s:right){
                    string temp=ch+s;
                    ans.push_back(temp);
                }
                
                
            }
            return ans;
    }
    vector<string> letterCombinations(string digits) {
    if(!digits.size()){
        return {};
       }
       return memo(digits,0);
    }
};
