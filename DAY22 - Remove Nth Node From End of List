#DAY22 - Remove Nth Node From End of List😶‍🌫️
#100DaysOfCode #100daysofcodechallenge 
Algo,
*I have simply counted the no of nodes, count
*then traversed temp till, count-n
*if count-n ==0 return head->next
*if(temp->next->next==NULL) -> temp=NULL
https://leetcode.com/problems/remove-nth-node-from-end-of-list/submissions/
**************************************
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1] 

Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
***************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* temp = head;
        int count = 1;
        while(temp->next != NULL){
            count++;
            temp = temp->next;
        }
        temp = head;
        for(int i = 0; i<(count-n-1);i++){
            temp = temp->next;
        }
        if((count-n)==0){
            return temp->next;
        }
        if(temp->next==NULL ||temp->next->next==NULL){
            temp->next=NULL;
        }
        else{
            temp->next = temp->next->next;
            
        }
        return head;
    }
};
