Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.
A subarray is a contiguous subsequence of the array.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Constraints:
1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
Accepted - 782,607
Submissions - 2,257,499
****************************************
//Brute Force - TC - O(n^3)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int max = INT_MIN;
        int product = 1;
        if(nums.size() == 0 or nums.size()==1){
            return nums[0];
        }
        for(int i = 0;i<nums.size();i++){
            for(int j = i;j<nums.size();j++){
                product = 1;
                for(int k = i;k<=j;k++){
                    cout<<nums[k]<<" ";
                    product = product* nums[k];
                }
                if(max<product){
                    max = product;
                }
                cout<<endl;
            }
        }
        return max;
    }
};
******************************
int maxProduct(vector<int>& nums) {
        int n = nums.size();
        int min_dp[n];
        int max_dp[n];
        min_dp[0] = nums[0];
        max_dp[0] = nums[0];
        for(int i=1;i<n;i++){
            max_dp[i] = max(max_dp[i-1]*nums[i],max(nums[i],nums[i]*min_dp[i-1]));
            min_dp[i] = min(min_dp[i-1]*nums[i],min(nums[i],nums[i]*max_dp[i-1]));
        }
        int ans = INT_MIN;
        for(int i=0;i<n;i++){
            ans = max(ans,max_dp[i]);
        }
        return ans;        
    }
