#Day19 3Sum ClosestðŸŒ‹
#100DaysOfCode #100daysofcodechallenge 
ALGO,
*Similar to 3 sum approach 
*first consider value of first index to be constant
*apply 2 pointer approach
*to find the closest index store the absolute difference and compare it
https://leetcode.com/problems/3sum-closest/submissions/ 
****************************
Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Example 2:
Input: nums = [0,0,0], target = 1
Output: 0

Constraints:
3 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-104 <= target <= 104
***************************
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int i = 0; 
        int j, k;
        int n = nums.size();
        int ans = 0;
        int ans_Diff = 9999;
        while(i<n-2){
            // consider the first digit to be constant and subtract it from the target
            int x = target - nums[i];
            //Now we'll follow two pointer approach to check if we have any two numbers in the given vector which sums to x
            int l = i+1, r = n-1;
            while(l<r){
                int sum = nums[i];
                //if equal to x -> return target as it itself is the closest sum
                if(nums[l]+nums[r]==x){
                    return target;
                }
                //if less -> increment left pointer and compare and check the diff
                
                else if(nums[l]+nums[r]<x){
                    sum = sum+nums[l]+nums[r];
                    int temp =abs(target - sum);
                    //if diff is less -> store it
                    if(temp<ans_Diff){
                        ans_Diff=temp;
                        ans = sum;
                    }
                    l++;
                    continue;
                }
                //if more -> decrement right pointer and compare and check the diff

                else if(nums[l]+nums[r]>x){
                    sum = sum+nums[l]+nums[r];
                    int temp = abs(sum - target);
                    //if diff is less -> store it
                    if(temp<ans_Diff){
                        ans_Diff=temp;
                        ans = sum;
                    }
                    r--;
                }
            }
            //increment the 3rd number
            i++;
        }
        //return the final sum
        return ans;
    }
};
