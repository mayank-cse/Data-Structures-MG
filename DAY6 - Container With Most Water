You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

*****************************

int maxArea(vector<int>& height) {
//Declore the variables
        int i=0;
        int j=height.size()-1;
        int k=height.size()-1;
        int maxV=0;
 //loop initialized till left pointer is less than right pointer
        while(i<j){
            int lh=height[i];
            int rh=height[j];
            int min_h=min(lh,rh);
            maxV = max(maxV,min_h*(k));    //if the current volume is greater then store it in maxV 
            if(lh<rh){    //if left pillar is smaller increment the left pointer i.e. i
                i++;
            }
            else{         //if the right pointer is smaller decrement the right pointer
                j--;
            }
            k--;
        }
        return maxV;      //return the maximum area
    }
    
Success

Runtime: 97 ms, faster than 61.73% of C++ online submissions for Container With Most Water.
Memory Usage: 58.9 MB, less than 98.52% of C++ online submissions for Container With Most Water.
