You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].

Example 3:
Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
*******************************************************************
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int n=digits.size();
        int i=n-1;
        while(digits[i]==9){
            digits[i]=0;
            if(i==0){
                vector<int> newNum(n+1);
                newNum[0]=1;
                return newNum;
            }
            i--;
        }
        
        digits[i]++;
        return digits;
    }
};
********************************************************************
#Day30 - Plus OneðŸª‚ðŸ˜„
#100DaysOfCode #100daysofcodechallenge 
Algo,
*loop from the last till Digit[i]!=9
*Digit[i]++
*only edge case to handle is when all are 9
*in case of all 9, make new vector with size + 1 and place '1' in zeroth position and rest '0'
https://leetcode.com/problems/plus-one/submissions/â€¦
