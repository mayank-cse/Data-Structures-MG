Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:
What should we return when needle is an empty string? This is a great question to ask during an interview.
For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

Example 1:
Input: haystack = "hello", needle = "ll"
Output: 2

Example 2:
Input: haystack = "aaaaa", needle = "bba"
Output: -1

Example 3:
Input: haystack = "", needle = ""
Output: 0

Constraints:
0 <= haystack.length, needle.length <= 5 * 104
haystack and needle consist of only lower-case English characters.
**********************************
Edge Cases
*if the str2 is bigger than str1 -> return -1
*if str2 is NULL -> return 0

Algo,
*if the str2 is bigger than str1 -> return -1
*if str2 is NULL -> return 0
*traverse the str1 using while loop
*point the index variable to the position where str1 and str2 starts matching
*check if the complete string is present -> return index
*else i=index+1, index=0,k=0 // come back the start position of str2.
************************************
class Solution {
public:

int strStr(string haystack, string needle) {
     int n = haystack.length();
     int m = needle.length();
     if(m==0){    //if str2 is empty
         return 0;
     }
     if(m>n){    //if str2 is bigger than str1
         return -1;
     }
     int k = 0;    //to traverse str2
     int i = 0;    //to traverse str1
     int flag = 0;    //to know if we have started traversing or we are in the middle of traversal of str2
     int index = 0;   //stores the answer index
 	
 	//traverse the loop till i<n 
     while(i<n){
 	//**VERY IMP **- compare the string if both of there character r equal **AND** also compare if it has the capacity by checking if the last elements are equal - this will help you optimize the solution otherwise the last test case won't pass
         if(haystack[i]==needle[k] and i+m-1<n and haystack[i+m-1] == needle[m-1] and flag == 0 || haystack[i]==needle[k] and flag==1){
             if(flag==0){
                 index = i;
             }
             flag = 1;
             i++;
             k++;
             if(k>=m){
                 return index;
             }
             continue;
         }
     
         if (haystack[i]!=needle[k] and flag==1){
             k=0;
             flag=0;
             i = index+1;
             index = 0;
             continue;
         }
         i++;
     }
     return -1;
 }
};

************************************
Success
Runtime: 3 ms, faster than 98.33% of C++ online submissions for Implement strStr().
Memory Usage: 7.1 MB, less than 67.17% of C++ online submissions for Implement strStr().
