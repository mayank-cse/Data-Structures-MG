Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100
Accepted
721,643
Submissions
1,340,362
***************************************************
class Solution {
public:
    vector<vector<int>>v;
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(!root) return v;
        queue<TreeNode*> q;
        vector<int> v1;
        q.push(root);
        v1.push_back(root->val); v.push_back(v1);
        bool flag = false;
        while(!q.empty()) {
            int size = q.size();
            v1.clear();
            while(size--) {
                TreeNode* temp = q.front();
                q.pop();
                if(temp->left) { q.push(temp->left); v1.push_back(temp->left->val); }
                if(temp->right) { q.push(temp->right); v1.push_back(temp->right->val); }  
            }
            if(!flag) reverse(v1.begin(), v1.end());
            if(v1.size()) v.push_back(v1);
            flag = !flag;
        }
        return v;
    }
};
