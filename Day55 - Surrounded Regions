Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.

Example 2:
Input: board = [["X"]]
Output: [["X"]]

Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.
Accepted - 426,714
Submissions - 1,236,805
*************************************************
class Solution {
public:
     void dfs(int x,int y,vector<vector<int>>&vis,vector<vector<char>>& board)
    {
        if(x<0 ||x>=board.size() ||y<0 || y>=board[0].size() || board[x][y]!='O')
            return ;
        if(vis[x][y]==1)
            return ;
        vis[x][y]=1;
        if(board[x][y]=='O')
        board[x][y]='1';
        dfs(x+1,y,vis,board);
        dfs(x,y+1,vis,board);
        dfs(x-1,y,vis,board);
        dfs(x,y-1,vis,board);
        return ;
    }
    void solve(vector<vector<char>>& board) {
        vector<vector<int>>vis(board.size(),vector<int>(board[0].size()));
        for(int i=0;i<board[0].size();i++)
        {
            if(board[0][i]=='O' && vis[0][i]==0)
            {
                dfs(0,i,vis,board);
            }
            if(board[board.size()-1][i]=='O' && vis[board.size()-1][i]==0)
            {
               dfs(board.size()-1,i,vis,board);
            }
        }
        for(int i=0;i<board.size();i++)
        {
             if(board[i][0]=='O' && vis[i][0]==0)
            {
                dfs(i,0,vis,board);
            }
            if(board[i][board[0].size()-1]=='O' && vis[i][board[0].size()-1]==0)
            {
              dfs(i,board[0].size()-1,vis,board);
            }
        }
      
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]=='1')
                    board[i][j]='O';
                else
                    board[i][j]='X';
            }
        }
    }
};
Success
Runtime: 31 ms, faster than 15.34% of C++ online submissions for Surrounded Regions.
Memory Usage: 10.2 MB, less than 41.04% of C++ online submissions for Surrounded Regions.
**********************************************************************************

//METHOD-2

void dfs(vector<vector<char>>& grid, int i, int j)
{
    if(grid[i][j] == 'O'){
        
        grid[i][j] = '1';

        if(i+1 < grid.size()) dfs(grid, i+1, j);
        if(i > 1) dfs(grid, i-1, j);
        if(j+1 < grid[i].size()) dfs(grid, i, j+1);
        if(j > 1) dfs(grid, i, j-1);
    }
}
class Solution {
public:
    void solve(vector<vector<char>>& grid) {
        if(grid.size() == 0)
            return;
        int row = grid.size(), col = grid[0].size();
        
        //first row and last row
        for(int i=0; i<row; i++){
            dfs(grid, i, 0);
            dfs(grid, i, col-1);
        }
        //first col and last col
        for(int j=1; j<col-1; j++){
            dfs(grid, 0, j);
            dfs(grid, row-1, j);
        }
        
        for (int i = 0; i < row; ++i)
            for (int j = 0; j < col; ++j)
                if (grid[i][j] == 'O') grid[i][j] = 'X';
                else if (grid[i][j] == '1') grid[i][j] = 'O';
    }
};
