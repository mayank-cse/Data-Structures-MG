Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:
MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.

Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 
Constraints:
-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

Accepted - 1,025,599
Submissions - 2,020,649
**************************************************************************************
TC - O(1) for Each Step
S(C) - O(2N)
class MinStack {
public:
    stack<pair<int, int>> minStack; 
    MinStack() {
        // minStack = new minStack;
    }
    
    void push(int val) {
        if(minStack.empty()||val<minStack.top().second){
            minStack.push(make_pair(val,val));
        }
        else{
            minStack.push(make_pair(val,minStack.top().second));
        }
    }
    
    void pop() {
        minStack.pop();
    }
    
    int top() {
        return minStack.top().first;
    }
    
    int getMin() {
        return minStack.top().second;
    }
};
//OPTIMAL
TC = O(1)
SC = O(n)
class MinStack {
public:
    stack<long int> st;
    long int mini;
    MinStack() {
        mini = INT_MAX;
    }
    
    void push(int val) {
        long int valu = (long int)val;
        if(st.empty()){
            st.push(valu);
            mini = valu;
        }
        else{
            if(valu<mini){
                st.push(valu*2 - mini);
                mini = valu;
            }
            else{
                st.push(valu);
            }
        }
    }
    
    void pop() {
        if(st.empty()){
            cout<<"Stack is Empty";
        }
        if(st.top()<mini){
            mini = 2*mini - st.top();
        }
        st.pop();
    }
    
    int top() {
        if(st.empty()){
            cout<<"Stack is Empty";
            return 0;
        }
        if(st.top()<mini){
            return mini;
        }
        return st.top();

    }
    
    int getMin() {
        return mini;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

Success
Runtime: 38 ms, faster than 39.72% of C++ online submissions for Min Stack.
Memory Usage: 16.3 MB, less than 92.39% of C++ online submissions for Min Stack.
