You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:

1 <= n <= 45
*************************************************
class Solution {
public:
    int helper(int n,int i, vector<int> &dp){
        if(i==n){
            return 1;
        }
        if(i>n){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        dp[i] = helper(n, i+1, dp)+helper(n,i+2, dp);
        return dp[i];
        
    }
    int climbStairs(int n) {
        if(n==1){
            return 1;
        }
        if(n==2){
            return 2;
        }
        vector<int> dp(n,-1);
        return helper(n,0, dp);
    }
};
************************************************
#Day31 - Climbing Stairs
#100DaysOfCode #100daysofcodechallenge 
Algo,
*if(i==n)->return 1;//reached
*if(i>n)-> return 0;//can not reach
*if(dp[i]!=-1)-> return dp[i];
*Use DP to store the value of count every time you calculate it
the return the dp[i]
https://leetcode.com/problems/climbing-stairs/submissions/ 
