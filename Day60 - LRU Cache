Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put.
Accepted
1,101,156
Submissions
2,740,842
************************************************************

class LRUCache {
public:
listdll;//doubly link list
unordered_map<int,int>mp;//key value
unordered_map<int,list::iterator>ladd;
int size,csize;
LRUCache(int c){
csize=c;
size=0;
}
int get(int key)
{
if(mp.find(key)==mp.end())return -1;

     //if key present then it erase it from that address in dll and also delete it from  address map of dll
     list<int>::iterator it=ladd[key];
     dll.erase(it);
     ladd.erase(key);
    
     //insert  key at  begin of dll  and address in to address map
     dll.push_front(key);
     ladd[key]=dll.begin();
     
     return mp[key];
  }

void put(int key,int val)
  {
      //key present  or cache full  then delete
      
     //delete key
     if(mp.find(key)!=mp.end()) 
       {
         //if key present in linklist then it delete it from dll 
         //and delete it's address from ladd map also size--
          dll.erase(ladd[key]);
          ladd.erase(key);
          mp.erase(key);
         size--;
       }
    
     //delete last
     if(size==csize)//if cache is full
        {
           int lkey=dll.back(); //last key
          // dll.erase(ladd[lkey]);
           dll.pop_back();
           ladd.erase(lkey);
           mp.erase(lkey);
           size--;
        } 
      size++;
     dll.push_front(key);
     ladd[key]=dll.begin();
     mp[key]=val;
 }
};
****************************************************
Success
Runtime: 747 ms, faster than 24.84% of C++ online submissions for LRU Cache.
Memory Usage: 165.2 MB, less than 71.49% of C++ online submissions for LRU Cache.

