**ADD TWO NUMBERS**

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

2 -> 4 -> 6
5 -> 6 -> 1
----
7 -> 0 -> 8
*******
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode();
        ListNode* temp = dummy;
        int carry = 0;
        while(l1|| l2 || carry){
            int sum = 0;
            if(l1!=NULL){
                sum += l1->val;
                l1 = l1->next;
            }
            if(l2!=NULL){
                sum += l2->val;
                l2 = l2->next;
            }
            sum += carry;
            carry = sum/10;
            ListNode* node = new ListNode(sum%10);
            temp->next = node;
            temp = temp->next;
             
        }
        return dummy->next;
    }

******
Runtime: 36 ms, faster than 62.96% of C++ online submissions for Add Two Numbers.
Memory Usage: 71.6 MB, less than 11.15% of C++ online submissions for Add Two Numbers.
******
