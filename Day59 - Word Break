Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 

Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
Accepted
1,111,640
Submissions
2,480,912
*******************************************************
class Solution {
public:
    bool f(int i,int n,string s,unordered_map<string,int>&mp,vector<int>&dp)
    {
       if(i>=n)
           return true;
        if(dp[i]!=-1)
            return dp[i];
        string t="";
        for(int k=i;k<n;k++)
        {   
           t+=s[k];
            if(mp.find(t)!=mp.end())
            {
                if(f(k+1,n,s,mp,dp)==true)
                    return dp[i]=true;
            }
        }
        return dp[i]=false;
    }
    bool wordBreak(string s, vector<string>& a) {
        
        int n=s.size();
        unordered_map<string,int>mp;
        for(auto it:a)
            mp[it]++;
        vector<int>dp(n,-1);
       return f(0,n,s,mp,dp); 
    }
};
*********************************************
Success
Details 
Runtime: 15 ms, faster than 58.51% of C++ online submissions for Word Break.
Memory Usage: 9.5 MB, less than 65.99% of C++ online submissions for Word Break.
