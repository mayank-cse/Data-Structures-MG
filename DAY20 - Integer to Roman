#DAY20 - Integer to Romanü§î
#100DaysOfCode #100daysofcodechallenge 
It was an amazing question, twisted my mind a lot
Algo,
**Check constraints of the question, no is not gonna be bigger than 3k
*Recursion
*If num>1000 -> call helper, nums-100 and ans + "M";
Do same with othersüòè
***************************
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given an integer, convert it to a roman numeral.

Example 1:
Input: num = 3
Output: "III"
Explanation: 3 is represented as 3 ones.

Example 2:
Input: num = 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.

Example 3:
Input: num = 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 
Constraints:
1 <= num <= 3999

********************************

class Solution {
public:

//create a helper function so that we can call it recursively
string helper(int nums, string ans){
	//Base Case - if nums equals to zero -> return the final ans
        if(nums==0){
            return ans;
        }
		//if greater than 1000 -> Add respective String
        if(nums>=1000){
            // ans = ans + "M";
            return helper(nums-1000, ans+"M");
        }
		//if greater than 900 -> Add respective String
        else if(nums>=900){
            return helper(nums-900, ans+"CM");
        }
        else if(nums>=500){
            return helper(nums-500, ans+"D");
        }
        else if(nums>=400){
            return helper(nums-400, ans+"CD");
        }
        else if(nums>=100){
            return helper(nums-100, ans+"C");
        }
        else if(nums>=90){
            return helper(nums-90, ans+"XC");
        }
        else if(nums>=50){
            return helper(nums-50, ans+"L");
        }
        else if(nums>=40){
            return helper(nums-40, ans+"XL");
        }
        else if(nums>=10){
            return helper(nums-10, ans+"X");
        }
        else if(nums>=9){
            return helper(nums-9, ans+"IX");
        }
        else if(nums>=5){
            return helper(nums-5, ans+"V");
        }
        else if(nums>=4){
            return helper(nums-4, ans+"IV");
        }
        else if(nums>=1){
            return helper(nums-1, ans+"I");
        }
        return ans;
        
    }
    string intToRoman(int num) {
	//Create string to store ans value
        string ans = "";
		//Call recursion
        ans = helper(num, ans);
		//Return ans
        return ans;
    }

};
*******************************
Success
Runtime: 8 ms, faster than 72.37% of C++ online submissions for Integer to Roman.
Memory Usage: 5.9 MB, less than 79.17% of C++ online submissions for Integer to Roman.
