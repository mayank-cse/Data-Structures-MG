Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Follow up: Recursive solution is trivial, could you do it iteratively?
**************************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
vector<int>r;
    vector<int> inorderTraversal(TreeNode* root) {
        
        if(root){
            inorderTraversal(root->left);
            r.push_back(root->val);
            inorderTraversal(root->right);
        }
        
        return r;
        
    }
};
*****************************************************************
Success
Runtime: 3 ms, faster than 56.29% of C++ online submissions for Binary Tree Inorder Traversal.
Memory Usage: 10.3 MB, less than 6.94% of C++ online submissions for Binary Tree Inorder Traversal.
