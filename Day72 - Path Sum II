
************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<vector>
class Solution {
public:
    vector<vector<int>> ans;
    void helper(TreeNode* root, int targetSum, vector<int> &output){
        if(!root){ //check whether the root is null or not, if null return
            return;
        }
        targetSum = targetSum - (root->val);//set newtarget
        output.push_back(root->val);        //include the node in path
        if(root->right==NULL and root->left == NULL){ // check if the current node is leaf node
            if(targetSum == 0){ // check if we have reached our target
                ans.push_back(output); // if yes push_back the path to our answer
            }
            output.pop_back(); //if it is a leaf node but target is not reached, we pop_back this node and return
            return;
        }
        helper(root->left, targetSum, output);//we call the function for left node
        helper(root->right, targetSum, output);//we call the function for right node
        output.pop_back();//backtracking
       // targetSum = targetSum+root->val;
        
        
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> output;
        helper(root,targetSum, output);
        return ans;
    }
};
********************************************
