Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: []

Example 3:
Input: root = [1,2], targetSum = 0
Output: []

Constraints:
The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000
Accepted - 653,414
Submissions - 1,172,371
************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<vector>
class Solution {
public:
    vector<vector<int>> ans;
    void helper(TreeNode* root, int targetSum, vector<int> &output){
        if(!root){ //check whether the root is null or not, if null return
            return;
        }
        targetSum = targetSum - (root->val);//set newtarget
        output.push_back(root->val);        //include the node in path
        if(root->right==NULL and root->left == NULL){ // check if the current node is leaf node
            if(targetSum == 0){ // check if we have reached our target
                ans.push_back(output); // if yes push_back the path to our answer
            }
            output.pop_back(); //if it is a leaf node but target is not reached, we pop_back this node and return
            return;
        }
        helper(root->left, targetSum, output);//we call the function for left node
        helper(root->right, targetSum, output);//we call the function for right node
        output.pop_back();//backtracking
       // targetSum = targetSum+root->val;
        
        
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> output;
        helper(root,targetSum, output);
        return ans;
    }
};
********************************************
