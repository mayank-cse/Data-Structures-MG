#Day23 - Permutations - LeetCode
#100DaysOfCode #100daysofcodechallenge 
Algo,
*RECURSION & SWAPPING
*Base Case - If you traverse all -> return ans;
*for loop to traverse every index
*swap the index with every other index
ans it's done
TC - O(n!)
************************************
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
****************************************
class Solution {
public:
    vector<vector<int>> ans;
    void helper(vector<int>&nums, int idx){
        if(idx==nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int i=idx;i<nums.size();i++){
            swap(nums[i], nums[idx]);
            helper(nums, idx+1);
            swap(nums[i], nums[idx]);
        }
        return;
    }
    vector<vector<int>> permute(vector<int>& nums) {
        helper(nums, 0);
        return ans;
    }
};
Time Complexity - O(n!)
***********************************
Success
Runtime: 4 ms, faster than 68.76% of C++ online submissions for Permutations.
Memory Usage: 8 MB, less than 39.61% of C++ online submissions for Permutations.
