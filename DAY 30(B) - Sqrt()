Given a non-negative integer x, compute and return the square root of x.
Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.
Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.

Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.

Constraints:
0 <= x <= 231 - 1
*********************************************
class Solution {
public:
    int mySqrt(int x) {
        if(x==0){
            return 0;
        }
        long int i =0 ;
        long int z = i*i;
        while((i*i)<x){
            i++;
        }
        if(i*i==x){
            return i;
        }
        else{
            return i-1;
        }
        // second option using for loop
        // for(int i = 0; i<=x/2+1; i++){
        //     long int z = i;
        //     z *= i;
        //     if(z==x){
        //         return i;
        //     }
        //     else if (z>x){
        //         return i-1;
        //     }
        // }
        return 1;
    }
};
*********************************************
#Day30 - Sqrt(x)
#100daysofcodechallenge 
Algo,
*while loop till the square of 'i' becomes greater or equal to x
OR
*for loop till x/2+1;
*if equal -> return i;
*if greater -> return i-1;

T.C. = O(logn)
https://leetcode.com/problems/sqrtx/submissions/ 
