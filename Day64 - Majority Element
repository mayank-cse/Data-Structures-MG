Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

Follow-up: Could you solve the problem in linear time and in O(1) space?
Accepted - 1,295,429
Submissions - 2,047,374
*******************************************************
1.Using unordered map (hashing)

        int n = nums.size() ;
        int m = n/2 ;
        
        unordered_map<int,int> freq ;
        for ( auto &it : nums ) {
            freq[it] ++ ;
        }
        
        int ans = 0 ;
        for ( auto &it : freq ) {
            if( it.second > m ) ans = it.first ;
        }
        
        return ans ;
*********
Using sorting ( 2 - lines )
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort ( nums.begin() , nums.end() ) ;
        return nums[ nums.size() / 2 ];
    }
};
**********
//O(n) using Boyer-Moore Majority Vote Algorithm
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int major=nums[0], count = 1;
        for(int i=1; i<nums.size();i++){
            if(count==0){
                count++;
                major=nums[i];
            }else if(major==nums[i]){
                count++;
            }else count--;
            
        }
        return major;

    }
};
***********************************
Success
Runtime: 29 ms, faster than 51.93% of C++ online submissions for Majority Element.
Memory Usage: 19.7 MB, less than 13.04% of C++ online submissions for Majority Element.
