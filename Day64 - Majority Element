Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

Follow-up: Could you solve the problem in linear time and in O(1) space?
Accepted - 1,295,429
Submissions - 2,047,374
*******************************************************
//Using HashMap
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int max = 0;
        int ans = 0;
        unordered_map<int,int> freq ;
        for ( auto &it : nums ) {
            freq[it] ++ ;
        }

        for(auto it : freq){
            // int iterator=map_name.find(nums[i])
            if(max<it.second){
                max = it.second;
                ans = it.first;
            }
        }
        return ans;
    }
};
