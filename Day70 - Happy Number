Write an algorithm to determine if a number n is happy.
A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Example 1:
Input: n = 19
Output: true

Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
Output: false

Constraints:
1 <= n <= 231 - 1
Accepted - 895,772
Submissions - 1,662,488
************************************************
class Solution {
public:

    int checkSum(int n, int &flag){
        int sum = 0;
        while(n!=0){
            int d = n%10;
            n = n/10;
            sum += pow(d,2);
        }
        cout<<sum<<endl;

        if(sum == 1){
            flag = 1;
        }
        if(sum == 89){
            flag =2;
        }
        return sum;
    }
    bool isHappy(int n) {
        //bool helper(int n, );
        int flag = 0;
        int sum = checkSum(n, flag);
        if(flag==1){
            return true;
        }
        else if(flag==2){
            return false;
        }
        else{
            return isHappy(sum);
        }
        return false;
    }
};
