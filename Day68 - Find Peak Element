A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Constraints:
1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.
Accepted - 833,655
Submissions - 1,809,305
*************************************
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int max = -9999;
        int index = 0;
        for(int i = 0; i<nums.size();i++){
            if(nums[i]>max){
                max = nums[i];
                index = i;
            }
        }
        return index;
    }
};
************************
class Solution {
public:
    int len;
    int helper( vector<int>& nums, int start, int end ){
        if(end<start) return -1;
        int mid = start + (end-start)/2;
        cout<<mid;
        int lNeighbor = (mid - 1 >= 0) ? nums[mid - 1] : INT_MIN;
        int rNeighbor = (mid + 1 < len) ? nums[mid + 1] : INT_MIN;
        if (nums[mid] >= lNeighbor && nums[mid] >= rNeighbor) {
            return mid;
        }
        
        if (lNeighbor > rNeighbor) {
            return helper(nums, start, mid - 1);
        }
        return helper(nums, mid + 1, end);

    }
    int findPeakElement(vector<int>& nums) {
        if(nums.size()==1){
            return 0;
        }
        len = nums.size();
        return helper(nums, 0,nums.size()-1);
    }
};
*************************************
Success
Runtime: 10 ms, faster than 21.74% of C++ online submissions for Find Peak Element.
Memory Usage: 8.7 MB, less than 99.41% of C++ online submissions for Find Peak Element.
